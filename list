<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Testing Credentials Portal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #2c3e50);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0;
            color: white;
        }
        
        header h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        header p {
            font-size: 1.2rem;
            max-width: 700px;
            margin: 0 auto;
            opacity: 0.9;
        }
        
        .search-container {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 25px;
            margin: 30px 0;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .search-box {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .search-box input {
            flex: 1;
            padding: 15px 20px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .search-box input:focus {
            outline: none;
            background: white;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }
        
        .filters {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .filter {
            flex: 1;
            min-width: 200px;
        }
        
        .filter select {
            width: 100%;
            padding: 12px 15px;
            border: none;
            border-radius: 50px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        .stats {
            display: flex;
            justify-content: space-between;
            color: white;
            margin: 20px 0;
            padding: 0 10px;
            font-size: 1.1rem;
        }
        
        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }
        
        .card-header {
            background: linear-gradient(90deg, #3498db, #2980b9);
            color: white;
            padding: 20px;
            position: relative;
        }
        
        .card-header h3 {
            font-size: 1.4rem;
            margin-bottom: 5px;
        }
        
        .environment {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(0, 0, 0, 0.2);
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
        }
        
        .card-body {
            padding: 20px;
            flex-grow: 1;
        }
        
        .info-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .info-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        
        .info-item strong {
            display: block;
            color: #2c3e50;
            margin-bottom: 5px;
            font-size: 0.95rem;
        }
        
        .credential-field {
            display: flex;
            align-items: center;
            background: #f8f9fa;
            padding: 12px 15px;
            border-radius: 8px;
            margin-top: 8px;
            border: 1px solid #e9ecef;
            transition: all 0.2s ease;
            cursor: pointer;
            position: relative;
        }
        
        .credential-field:hover {
            background: #e9ecef;
        }
        
        .credential-field.copied::after {
            content: "Copied!";
            position: absolute;
            right: 45px;
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            animation: fadeOut 1.5s forwards;
        }
        
        @keyframes fadeOut {
            0% { opacity: 1; }
            70% { opacity: 1; }
            100% { opacity: 0; }
        }
        
        .credential-field span {
            flex: 1;
            word-break: break-all;
            font-size: 1.1rem;
            color: #34495e;
        }
        
        .copy-btn {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 1.1rem;
            padding: 5px;
            min-width: 30px;
            min-height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .copy-btn:hover {
            color: #2980b9;
        }
        
        .url {
            color: #3498db !important;
            text-decoration: none;
        }
        
        .url:hover {
            text-decoration: underline;
        }
        
        .card-footer {
            padding: 15px 20px;
            background: #f8f9fa;
            border-top: 1px solid #eee;
            font-size: 0.9rem;
            color: #7f8c8d;
        }
        
        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            padding: 50px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            font-size: 1.2rem;
            color: #7f8c8d;
        }
        
        .tag {
            display: inline-block;
            background: #e0f7fa;
            color: #00838f;
            padding: 3px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-top: 5px;
        }
        
        .uat { background-color: #f39c12; }
        .prod { background-color: #27ae60; }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1000;
            transform: translateX(200%);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        @media (max-width: 768px) {
            .cards-container {
                grid-template-columns: 1fr;
            }
            
            .filters {
                flex-direction: column;
            }
            
            .search-box {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-key"></i> Testing Credentials Portal</h1>
            <p>Centralized access to all testing environments and credentials</p>
        </header>
        
        <div class="search-container">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search by channel, environment, login ID...">
                <button id="searchBtn" class="btn"><i class="fas fa-search"></i> Search</button>
            </div>
            
            <div class="filters">
                <div class="filter">
                    <select id="environmentFilter">
                        <option value="">All Environments</option>
                        <option value="UAT">UAT</option>
                        <option value="Prod">Production</option>
                    </select>
                </div>
                <div class="filter">
                    <select id="channelFilter">
                        <option value="">All Channels</option>
                        <option value="MoBiz">MoBiz</option>
                        <option value="DW Admin">DW Admin Portal</option>
                        <option value="Loyalty">Loyalty</option>
                        <option value="Biller">Biller Portal</option>
                        <option value="AMS">AMS</option>
                        <option value="Payment">Payment Hub</option>
                    </select>
                </div>
                <div class="filter">
                    <select id="statusFilter">
                        <option value="">All Statuses</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="stats">
            <div><i class="fas fa-database"></i> <span id="credentialCount">0</span> Credentials</div>
            <div><i class="fas fa-lock"></i> <span id="uatCount">0</span> UAT | <span id="prodCount">0</span> Production</div>
        </div>
        
        <div class="cards-container" id="cardsContainer">
            <!-- Cards will be dynamically inserted here -->
        </div>
    </div>
    
    <div class="notification" id="notification">
        <i class="fas fa-check-circle"></i> Copied to clipboard!
    </div>

    <script>
        // Sample credentials data
        const credentials = [
            {
                channel: "DW Admin Portal",
                environment: "UAT",
                url: "https://uatv1-administrator.momoney.com.mm/#!/login",
                login: "Log in with Outlook mail",
                password: "Need to create own user",
                notes: "Access for admin portal testing",
                status: "active"
            },
            {
                channel: "DW Admin Portal",
                environment: "Prod",
                url: "https://administrator.momoney.com.mm/",
                login: "Log in with Outlook mail",
                password: "Need to create own user",
                notes: "Production admin portal",
                status: "active"
            },
            {
                channel: "MoBiz ROOT",
                environment: "UAT",
                url: "https://uatv1-business.momoney.com.mm/#/login",
                login: "Hattt",
                password: "123456",
                notes: "Root access for MoBiz",
                status: "active"
            },
            {
                channel: "MoBiz ROOT",
                environment: "UAT",
                url: "https://uatv1-business.momoney.com.mm/",
                login: "maikhinmoemoe.myat@mo.com.mm",
                password: "XRUGn6",
                notes: "Alternative root login",
                status: "active"
            },
            {
                channel: "MoBiz company",
                environment: "UAT",
                url: "https://uatv1-business.momoney.com.mm/#/login",
                login: "susu",
                password: "suwutyee",
                phone: "09129875678",
                notes: "Company testing account",
                status: "active"
            },
            {
                channel: "MoBiz company",
                environment: "Prod",
                url: "https://business.momoney.com.mm",
                login: "su",
                password: "F0UH44VN",
                notes: "Production company access",
                status: "active"
            },
            {
                channel: "Fun flow portal",
                environment: "UAT",
                url: "https://uat-loanunit.momoney.com.mm/#/dashboard",
                login: "Log in with Outlook mail",
                password: "Need to create own user",
                notes: "Loan management portal",
                status: "active"
            },
            {
                channel: "Loyalty admin",
                environment: "UAT",
                url: "https://uatv1-loyalty-portal.momoney.com.mm/#/login",
                login: "Log in with Outlook mail",
                password: "Need to create own user",
                notes: "Loyalty program admin",
                status: "active"
            },
            {
                channel: "Biller portal",
                environment: "UAT",
                url: "https://uatv1-billingportal.momoney.com.mm/#/login",
                login: "09506569888",
                password: "Su@123!",
                notes: "Biller management access",
                status: "active"
            },
            {
                channel: "AMS - Strapi",
                environment: "UAT",
                url: "https://dev-ams-api.momoney.com.mm/",
                login: "nyeinchan.aung@mo.com.mm",
                password: "P@$$w0rd",
                notes: "AMS API access",
                status: "active"
            },
            {
                channel: "Payment Hub",
                environment: "UAT",
                url: "https://uatv1-admin-payment.momoney.com.mm/#!/login",
                login: "Lai Yee Maung",
                password: "56789@Laiyee@",
                notes: "Payment administration",
                status: "active"
            },
            {
                channel: "Self Service Portal",
                environment: "UAT",
                url: "https://ba.momoney.com.mm/#/login",
                login: "suwut.yee@mo.com.mm",
                password: "zirdfk",
                notes: "Business analysis portal",
                status: "active"
            },
            {
                channel: "MoBiz company",
                environment: "Prod",
                url: "https://business.momoney.com.mm",
                login: "moemoe",
                password: "Mai123@@",
                phone: "09765661524",
                notes: "Portal phone number provided",
                status: "active"
            },
            {
                channel: "Backoffice Portal",
                environment: "UAT",
                url: "https://sitv2-adminportal.momoney.com.mm/login",
                login: "09971566008",
                password: "Temp#100",
                notes: "Admin backoffice access",
                status: "active"
            },
            {
                channel: "Merchant portal",
                environment: "UAT",
                url: "https://uatv1-partner.momoney.com.mm/#/login",
                login: "80002421",
                password: "216730",
                phone: "09450685221",
                notes: "Merchant testing account",
                status: "active"
            }
        ];

        // DOM elements
        const cardsContainer = document.getElementById('cardsContainer');
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const environmentFilter = document.getElementById('environmentFilter');
        const channelFilter = document.getElementById('channelFilter');
        const statusFilter = document.getElementById('statusFilter');
        const credentialCount = document.getElementById('credentialCount');
        const uatCount = document.getElementById('uatCount');
        const prodCount = document.getElementById('prodCount');
        const notification = document.getElementById('notification');

        // Initialize counts
        function updateCounts() {
            const uat = credentials.filter(c => c.environment === 'UAT').length;
            const prod = credentials.filter(c => c.environment === 'Prod').length;
            
            uatCount.textContent = uat;
            prodCount.textContent = prod;
            credentialCount.textContent = credentials.length;
        }

        // Show notification
        function showNotification() {
            notification.classList.add('show');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 2000);
        }

        // Copy to clipboard
        function copyToClipboard(text) {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            showNotification();
        }

        // Render cards
        function renderCards(data) {
            cardsContainer.innerHTML = '';
            
            if (data.length === 0) {
                cardsContainer.innerHTML = `
                    <div class="no-results">
                        <i class="fas fa-search fa-2x"></i>
                        <h3>No credentials found</h3>
                        <p>Try adjusting your search or filters</p>
                    </div>
                `;
                return;
            }
            
            data.forEach(cred => {
                const card = document.createElement('div');
                card.className = 'card';
                
                // Generate credential fields HTML
                let credentialFields = `
                    <div class="info-item">
                        <strong>URL</strong>
                        <div class="credential-field" data-value="${cred.url}">
                            <span class="url">${cred.url}</span>
                            <button class="copy-btn"><i class="fas fa-copy"></i></button>
                        </div>
                    </div>
                    <div class="info-item">
                        <strong>Login</strong>
                        <div class="credential-field" data-value="${cred.login}">
                            <span>${cred.login}</span>
                            <button class="copy-btn"><i class="fas fa-copy"></i></button>
                        </div>
                    </div>
                    <div class="info-item">
                        <strong>Password</strong>
                        <div class="credential-field" data-value="${cred.password}">
                            <span>${cred.password}</span>
                            <button class="copy-btn"><i class="fas fa-copy"></i></button>
                        </div>
                    </div>
                `;
                
                // Add phone field if exists
                if (cred.phone) {
                    credentialFields += `
                        <div class="info-item">
                            <strong>Phone</strong>
                            <div class="credential-field" data-value="${cred.phone}">
                                <span>${cred.phone}</span>
                                <button class="copy-btn"><i class="fas fa-copy"></i></button>
                            </div>
                        </div>
                    `;
                }
                
                card.innerHTML = `
                    <div class="card-header">
                        <h3>${cred.channel}</h3>
                        <div class="environment ${cred.environment.toLowerCase()}">${cred.environment}</div>
                    </div>
                    <div class="card-body">
                        ${credentialFields}
                        <div class="info-item">
                            <strong>Notes</strong>
                            <span>${cred.notes}</span>
                            <div class="tag">${cred.status === 'active' ? 'Active' : 'Inactive'}</div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <i class="fas fa-info-circle"></i> Tap any credential to copy to clipboard
                    </div>
                `;
                cardsContainer.appendChild(card);
            });
            
            // Add event listeners to credential fields
            document.querySelectorAll('.credential-field').forEach(field => {
                field.addEventListener('click', function() {
                    const value = this.getAttribute('data-value');
                    copyToClipboard(value);
                    
                    // Add temporary copied effect
                    this.classList.add('copied');
                    setTimeout(() => {
                        this.classList.remove('copied');
                    }, 1500);
                });
            });
        }

        // Filter function
        function filterCredentials() {
            const searchTerm = searchInput.value.toLowerCase();
            const envValue = environmentFilter.value;
            const channelValue = channelFilter.value;
            const statusValue = statusFilter.value;
            
            const filtered = credentials.filter(cred => {
                const matchesSearch = 
                    cred.channel.toLowerCase().includes(searchTerm) ||
                    cred.environment.toLowerCase().includes(searchTerm) ||
                    cred.url.toLowerCase().includes(searchTerm) ||
                    cred.login.toLowerCase().includes(searchTerm) ||
                    (cred.phone && cred.phone.toLowerCase().includes(searchTerm)) ||
                    cred.notes.toLowerCase().includes(searchTerm);
                
                const matchesEnv = envValue ? cred.environment === envValue : true;
                const matchesChannel = channelValue ? cred.channel.includes(channelValue) : true;
                const matchesStatus = statusValue ? cred.status === statusValue : true;
                
                return matchesSearch && matchesEnv && matchesChannel && matchesStatus;
            });
            
            renderCards(filtered);
        }

        // Event listeners
        searchInput.addEventListener('input', filterCredentials);
        searchBtn.addEventListener('click', filterCredentials);
        environmentFilter.addEventListener('change', filterCredentials);
        channelFilter.addEventListener('change', filterCredentials);
        statusFilter.addEventListener('change', filterCredentials);

        // Initial render
        renderCards(credentials);
        updateCounts();
    </script>
</body>
</html>
